{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"premium"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0UkR_Lvwka9f","executionInfo":{"status":"ok","timestamp":1671420231495,"user_tz":300,"elapsed":1204,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"acbb9539-3899-4bcc-af59-80efb6214508"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/301data\n","%ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A1NQBjFTzAAo","executionInfo":{"status":"ok","timestamp":1671420231496,"user_tz":300,"elapsed":11,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"4179fa2d-5728-49c0-ef0a-c01602e8a321"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/301data\n","\u001b[0m\u001b[01;34mFERG_DB_256\u001b[0m/          \u001b[01;34mmanga_baseline\u001b[0m/         \u001b[01;34mtom_and_jerry\u001b[0m/\n","\u001b[01;34mFERG_DB_256_reduced\u001b[0m/  \u001b[01;34mmangaFacialExpression\u001b[0m/\n"]}]},{"cell_type":"code","execution_count":24,"metadata":{"id":"8zQJmelCy0Kp","executionInfo":{"status":"ok","timestamp":1671420231496,"user_tz":300,"elapsed":6,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"outputs":[],"source":["import tensorflow as tf \n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt \n","def listdir_nohidden(path):\n","    for f in os.listdir(path):\n","        if not f.startswith('.'):\n","            yield f\n","\n","rawdir = listdir_nohidden('/content/drive/MyDrive/301data/mangaFacialExpression')\n","Name = sorted(rawdir)\n","n = len(Name)\n","N = list(range(n))\n","string_to_num_mapping = dict(zip(Name,N)) \n","num_to_string_mapping = dict(zip(N,Name)) "]},{"cell_type":"code","source":["string_to_num_mapping, num_to_string_mapping"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v7N1usBZzSUT","executionInfo":{"status":"ok","timestamp":1671420231496,"user_tz":300,"elapsed":5,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"c37caa61-082b-4113-aee7-ea9d5f987673"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["({'angry': 0,\n","  'crying': 1,\n","  'embarrassed': 2,\n","  'happy': 3,\n","  'pleased': 4,\n","  'sad': 5,\n","  'shock': 6},\n"," {0: 'angry',\n","  1: 'crying',\n","  2: 'embarrassed',\n","  3: 'happy',\n","  4: 'pleased',\n","  5: 'sad',\n","  6: 'shock'})"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n","    brightness_range=(0.5,1),\n","    channel_shift_range=0.2,\n","    horizontal_flip=True,\n","    vertical_flip=False,\n","    rescale=1./255,\n","    validation_split=0.2\n",")\n","\n","root_dir = '/content/drive/MyDrive/301data/mangaFacialExpression'\n","\n","img_generator_flow_train = img_generator.flow_from_directory(\n","    directory=root_dir,\n","    target_size=(224, 224),\n","    batch_size=32,\n","    shuffle=True,\n","    subset=\"training\")\n","\n","img_generator_flow_valid = img_generator.flow_from_directory(\n","    directory=root_dir,\n","    target_size=(224, 224),\n","    batch_size=32,\n","    shuffle=True,\n","    subset=\"validation\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_mxeXnnlzWGh","executionInfo":{"status":"ok","timestamp":1671420231871,"user_tz":300,"elapsed":378,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"3c984a99-ae9d-4be5-966c-b11862dea613"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 299 images belonging to 7 classes.\n","Found 73 images belonging to 7 classes.\n"]}]},{"cell_type":"code","source":["imgs, labels = next(iter(img_generator_flow_train))\n","count = 0\n","for img, label in zip(imgs, labels):\n","  value=np.argmax(label)\n","  plt.imshow(img)\n","  plt.title(num_to_string_mapping[value])\n","  plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1T9Vpsz7cFXJL7nMe__GpYyunzGgMavfN"},"id":"4mqFcmuY3iNM","executionInfo":{"status":"ok","timestamp":1671420244631,"user_tz":300,"elapsed":12761,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"d07c97eb-1512-4ca5-9f3c-3584fc7729f8"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["## Baseline Model"],"metadata":{"id":"cVbZsnUCE5CS"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import datasets, layers, models\n","import matplotlib.pyplot as plt\n","\n","model = tf.keras.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.Flatten())\n","model.add(layers.Dense(64, activation='relu'))\n","model.add(layers.Dense(7, activation='softmax'))\n"],"metadata":{"id":"QJkzWeyq4nie","executionInfo":{"status":"ok","timestamp":1671420244632,"user_tz":300,"elapsed":22,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["model.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5GGEYH3mDlVG","executionInfo":{"status":"ok","timestamp":1671420244632,"user_tz":300,"elapsed":21,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"3adeaa50-5386-495e-bd95-007ebe66d7aa"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_6 (Conv2D)           (None, 222, 222, 32)      896       \n","                                                                 \n"," max_pooling2d_4 (MaxPooling  (None, 111, 111, 32)     0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_7 (Conv2D)           (None, 109, 109, 64)      18496     \n","                                                                 \n"," max_pooling2d_5 (MaxPooling  (None, 54, 54, 64)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_8 (Conv2D)           (None, 52, 52, 64)        36928     \n","                                                                 \n"," flatten_2 (Flatten)         (None, 173056)            0         \n","                                                                 \n"," dense_4 (Dense)             (None, 64)                11075648  \n","                                                                 \n"," dense_5 (Dense)             (None, 7)                 455       \n","                                                                 \n","=================================================================\n","Total params: 11,132,423\n","Trainable params: 11,132,423\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.0001),\n","              loss = tf.keras.losses.CategoricalCrossentropy(),\n","              metrics = [tf.keras.metrics.CategoricalAccuracy()])"],"metadata":{"id":"h82DgddQGvXU","executionInfo":{"status":"ok","timestamp":1671420244632,"user_tz":300,"elapsed":13,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["history = model.fit(img_generator_flow_train, \n","          validation_data=img_generator_flow_valid, epochs=30) \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_RQrm76IAb2","executionInfo":{"status":"ok","timestamp":1671420298473,"user_tz":300,"elapsed":53853,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"1cb2086a-f5dc-4dc4-a5ba-8e61c8f5da78"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","10/10 [==============================] - 3s 229ms/step - loss: 1.8338 - categorical_accuracy: 0.1806 - val_loss: 1.7436 - val_categorical_accuracy: 0.2055\n","Epoch 2/30\n","10/10 [==============================] - 2s 196ms/step - loss: 1.7350 - categorical_accuracy: 0.2709 - val_loss: 1.6914 - val_categorical_accuracy: 0.3699\n","Epoch 3/30\n","10/10 [==============================] - 2s 197ms/step - loss: 1.6637 - categorical_accuracy: 0.3411 - val_loss: 1.6759 - val_categorical_accuracy: 0.2740\n","Epoch 4/30\n","10/10 [==============================] - 2s 206ms/step - loss: 1.6220 - categorical_accuracy: 0.3779 - val_loss: 1.6535 - val_categorical_accuracy: 0.3288\n","Epoch 5/30\n","10/10 [==============================] - 2s 197ms/step - loss: 1.5765 - categorical_accuracy: 0.4247 - val_loss: 1.6330 - val_categorical_accuracy: 0.3425\n","Epoch 6/30\n","10/10 [==============================] - 2s 199ms/step - loss: 1.4940 - categorical_accuracy: 0.4214 - val_loss: 1.6049 - val_categorical_accuracy: 0.3699\n","Epoch 7/30\n","10/10 [==============================] - 2s 208ms/step - loss: 1.4512 - categorical_accuracy: 0.5552 - val_loss: 1.6118 - val_categorical_accuracy: 0.3425\n","Epoch 8/30\n","10/10 [==============================] - 2s 206ms/step - loss: 1.3289 - categorical_accuracy: 0.5084 - val_loss: 1.6467 - val_categorical_accuracy: 0.2740\n","Epoch 9/30\n","10/10 [==============================] - 2s 197ms/step - loss: 1.2330 - categorical_accuracy: 0.5786 - val_loss: 1.5217 - val_categorical_accuracy: 0.3699\n","Epoch 10/30\n","10/10 [==============================] - 2s 201ms/step - loss: 1.1390 - categorical_accuracy: 0.6120 - val_loss: 1.5718 - val_categorical_accuracy: 0.3014\n","Epoch 11/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.9856 - categorical_accuracy: 0.7124 - val_loss: 1.5077 - val_categorical_accuracy: 0.3836\n","Epoch 12/30\n","10/10 [==============================] - 2s 207ms/step - loss: 0.8730 - categorical_accuracy: 0.7291 - val_loss: 1.5619 - val_categorical_accuracy: 0.3425\n","Epoch 13/30\n","10/10 [==============================] - 2s 203ms/step - loss: 0.7984 - categorical_accuracy: 0.7793 - val_loss: 1.5762 - val_categorical_accuracy: 0.3562\n","Epoch 14/30\n","10/10 [==============================] - 2s 198ms/step - loss: 0.7317 - categorical_accuracy: 0.8060 - val_loss: 1.6758 - val_categorical_accuracy: 0.2877\n","Epoch 15/30\n","10/10 [==============================] - 2s 198ms/step - loss: 0.6666 - categorical_accuracy: 0.8060 - val_loss: 1.6236 - val_categorical_accuracy: 0.3699\n","Epoch 16/30\n","10/10 [==============================] - 2s 196ms/step - loss: 0.5226 - categorical_accuracy: 0.8729 - val_loss: 1.7320 - val_categorical_accuracy: 0.3836\n","Epoch 17/30\n","10/10 [==============================] - 2s 204ms/step - loss: 0.4598 - categorical_accuracy: 0.9064 - val_loss: 1.8137 - val_categorical_accuracy: 0.3014\n","Epoch 18/30\n","10/10 [==============================] - 2s 194ms/step - loss: 0.4999 - categorical_accuracy: 0.8562 - val_loss: 2.0111 - val_categorical_accuracy: 0.3014\n","Epoch 19/30\n","10/10 [==============================] - 2s 194ms/step - loss: 0.4247 - categorical_accuracy: 0.9130 - val_loss: 1.8510 - val_categorical_accuracy: 0.3836\n","Epoch 20/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.3607 - categorical_accuracy: 0.9365 - val_loss: 2.1219 - val_categorical_accuracy: 0.3562\n","Epoch 21/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.2878 - categorical_accuracy: 0.9565 - val_loss: 1.9682 - val_categorical_accuracy: 0.3014\n","Epoch 22/30\n","10/10 [==============================] - 2s 199ms/step - loss: 0.2219 - categorical_accuracy: 0.9666 - val_loss: 1.9324 - val_categorical_accuracy: 0.3014\n","Epoch 23/30\n","10/10 [==============================] - 2s 194ms/step - loss: 0.2000 - categorical_accuracy: 0.9732 - val_loss: 2.1974 - val_categorical_accuracy: 0.2877\n","Epoch 24/30\n","10/10 [==============================] - 2s 196ms/step - loss: 0.1810 - categorical_accuracy: 0.9799 - val_loss: 2.4652 - val_categorical_accuracy: 0.2740\n","Epoch 25/30\n","10/10 [==============================] - 2s 198ms/step - loss: 0.1330 - categorical_accuracy: 0.9900 - val_loss: 2.3912 - val_categorical_accuracy: 0.3562\n","Epoch 26/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.1154 - categorical_accuracy: 0.9866 - val_loss: 2.5347 - val_categorical_accuracy: 0.3014\n","Epoch 27/30\n","10/10 [==============================] - 2s 202ms/step - loss: 0.1051 - categorical_accuracy: 0.9967 - val_loss: 2.4726 - val_categorical_accuracy: 0.3151\n","Epoch 28/30\n","10/10 [==============================] - 2s 199ms/step - loss: 0.0907 - categorical_accuracy: 0.9933 - val_loss: 2.6476 - val_categorical_accuracy: 0.2877\n","Epoch 29/30\n","10/10 [==============================] - 2s 193ms/step - loss: 0.0638 - categorical_accuracy: 1.0000 - val_loss: 2.8587 - val_categorical_accuracy: 0.2740\n","Epoch 30/30\n","10/10 [==============================] - 2s 198ms/step - loss: 0.0679 - categorical_accuracy: 1.0000 - val_loss: 2.7680 - val_categorical_accuracy: 0.3014\n"]}]},{"cell_type":"code","source":["np.mean(model.history.history['val_categorical_accuracy']), np.max(model.history.history['val_categorical_accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I02UgtAr2Wbg","executionInfo":{"status":"ok","timestamp":1671420298475,"user_tz":300,"elapsed":21,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"faa2915d-ff4e-4da3-9290-c3753a4c7cc4"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.3214611902832985, 0.3835616409778595)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/301data/manga_baseline')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BbamYuNyJb7h","executionInfo":{"status":"ok","timestamp":1671420299505,"user_tz":300,"elapsed":1039,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"420aba4f-01ff-4cbd-ce2e-15d624076742"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 3 of 3). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"iKjMKH9aJdHQ","executionInfo":{"status":"ok","timestamp":1671420299505,"user_tz":300,"elapsed":16,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"e7d89831-ba89-4b8c-fef0-546b4a74827e"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/301data'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["plt.plot(model.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\n","plt.plot(model.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\n","plt.legend(loc=\"upper left\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"UpMPZw3bmm67","executionInfo":{"status":"ok","timestamp":1671420299506,"user_tz":300,"elapsed":11,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"4fc13655-bb6e-4c3f-9bca-29447560dc60"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Model Prediction Outcome"],"metadata":{"id":"9acBO-tkoC3q"}},{"cell_type":"code","source":["imgs, labels = next(iter(img_generator_flow_valid))"],"metadata":{"id":"TZnQYlu5KdMG","executionInfo":{"status":"ok","timestamp":1671420299506,"user_tz":300,"elapsed":9,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["preds = model.predict(imgs)\n","pred_labels = tf.argmax(preds, axis = -1)\n","\n","LABEL = []\n","for item in labels:\n","    LABEL += [np.argmax(item)]\n","print(LABEL)\n","\n","PRED = pred_labels.numpy().tolist()\n","\n","from sklearn.metrics import classification_report\n","print(classification_report(LABEL, PRED))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i95GUMxdoCJw","executionInfo":{"status":"ok","timestamp":1671420300368,"user_tz":300,"elapsed":871,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"43dfd4a8-3055-4354-c58f-0bb2de276770"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 65ms/step\n","[6, 6, 3, 3, 3, 3, 6, 3, 6, 2, 2, 3, 5, 6, 3, 6, 2, 3, 4, 6, 1, 5, 5, 5, 4, 3, 2, 6, 1, 6, 2, 6]\n","              precision    recall  f1-score   support\n","\n","           1       0.00      0.00      0.00         2\n","           2       0.20      0.20      0.20         5\n","           3       0.50      0.44      0.47         9\n","           4       0.20      0.50      0.29         2\n","           5       0.33      0.50      0.40         4\n","           6       0.50      0.40      0.44        10\n","\n","    accuracy                           0.38        32\n","   macro avg       0.29      0.34      0.30        32\n","weighted avg       0.38      0.38      0.37        32\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["# list(zip(LABEL, PRED))\n","i = 0\n","for img, label in zip(imgs, labels):\n","  value=np.argmax(label)\n","  plt.imshow(img)\n","  plt.title(\"True: \"+ num_to_string_mapping[value] + \"   Pred: \"+ str(num_to_string_mapping[PRED[i]]))\n","  plt.show()\n","  i+=1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"10UIXEFnrF-EJH_hWZPrUXrSgItYNTz3T"},"id":"at-C7RZoU3hD","executionInfo":{"status":"ok","timestamp":1671420312395,"user_tz":300,"elapsed":12032,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"9cfa5094-1b5b-485b-c0eb-c322d986a6e1"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["## Leaky RELU"],"metadata":{"id":"zW5RU7ngE8wr"}},{"cell_type":"code","source":["model2 = tf.keras.Sequential()\n","model2.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n","model2.add(layers.LeakyReLU())\n","model2.add(layers.MaxPooling2D((2, 2)))\n","model2.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model2.add(layers.LeakyReLU())\n","model2.add(layers.MaxPooling2D((2, 2)))\n","model2.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model2.add(layers.LeakyReLU())\n","model2.add(layers.Flatten())\n","model2.add(layers.Dense(64, activation='relu'))\n","model2.add(layers.Dense(7, activation='softmax'))"],"metadata":{"id":"yECi5G4oG_07","executionInfo":{"status":"ok","timestamp":1671420312396,"user_tz":300,"elapsed":20,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["model2.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.0001),\n","              loss = tf.keras.losses.CategoricalCrossentropy(),\n","              metrics = [tf.keras.metrics.CategoricalAccuracy()])"],"metadata":{"id":"9BC7qnSHGyrd","executionInfo":{"status":"ok","timestamp":1671420312396,"user_tz":300,"elapsed":18,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["history = model2.fit(img_generator_flow_train, \n","          validation_data=img_generator_flow_valid, epochs=30) \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rzt65tcKG-r1","executionInfo":{"status":"ok","timestamp":1671420366118,"user_tz":300,"elapsed":53740,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"916555dd-025e-40da-c776-0d00c1d709b4"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","10/10 [==============================] - 3s 227ms/step - loss: 1.8601 - categorical_accuracy: 0.1773 - val_loss: 1.7812 - val_categorical_accuracy: 0.1644\n","Epoch 2/30\n","10/10 [==============================] - 2s 198ms/step - loss: 1.7280 - categorical_accuracy: 0.3077 - val_loss: 1.7377 - val_categorical_accuracy: 0.2329\n","Epoch 3/30\n","10/10 [==============================] - 2s 220ms/step - loss: 1.7025 - categorical_accuracy: 0.2742 - val_loss: 1.6885 - val_categorical_accuracy: 0.2877\n","Epoch 4/30\n","10/10 [==============================] - 2s 206ms/step - loss: 1.6282 - categorical_accuracy: 0.3411 - val_loss: 1.6785 - val_categorical_accuracy: 0.3836\n","Epoch 5/30\n","10/10 [==============================] - 2s 207ms/step - loss: 1.5755 - categorical_accuracy: 0.4281 - val_loss: 1.6358 - val_categorical_accuracy: 0.4110\n","Epoch 6/30\n","10/10 [==============================] - 2s 202ms/step - loss: 1.5103 - categorical_accuracy: 0.3779 - val_loss: 1.7021 - val_categorical_accuracy: 0.2740\n","Epoch 7/30\n","10/10 [==============================] - 2s 214ms/step - loss: 1.4814 - categorical_accuracy: 0.4314 - val_loss: 1.6637 - val_categorical_accuracy: 0.3288\n","Epoch 8/30\n","10/10 [==============================] - 2s 198ms/step - loss: 1.3816 - categorical_accuracy: 0.5184 - val_loss: 1.6167 - val_categorical_accuracy: 0.3836\n","Epoch 9/30\n","10/10 [==============================] - 2s 215ms/step - loss: 1.3474 - categorical_accuracy: 0.5217 - val_loss: 1.6529 - val_categorical_accuracy: 0.3836\n","Epoch 10/30\n","10/10 [==============================] - 2s 203ms/step - loss: 1.2466 - categorical_accuracy: 0.5619 - val_loss: 1.5682 - val_categorical_accuracy: 0.3014\n","Epoch 11/30\n","10/10 [==============================] - 2s 192ms/step - loss: 1.0816 - categorical_accuracy: 0.6622 - val_loss: 1.6084 - val_categorical_accuracy: 0.3699\n","Epoch 12/30\n","10/10 [==============================] - 2s 195ms/step - loss: 0.9738 - categorical_accuracy: 0.6823 - val_loss: 1.5678 - val_categorical_accuracy: 0.3973\n","Epoch 13/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.9282 - categorical_accuracy: 0.6957 - val_loss: 1.7682 - val_categorical_accuracy: 0.2877\n","Epoch 14/30\n","10/10 [==============================] - 2s 192ms/step - loss: 0.8758 - categorical_accuracy: 0.7291 - val_loss: 1.6366 - val_categorical_accuracy: 0.2877\n","Epoch 15/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.7666 - categorical_accuracy: 0.7659 - val_loss: 1.7208 - val_categorical_accuracy: 0.3288\n","Epoch 16/30\n","10/10 [==============================] - 2s 196ms/step - loss: 0.7345 - categorical_accuracy: 0.7726 - val_loss: 1.7808 - val_categorical_accuracy: 0.3288\n","Epoch 17/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.5774 - categorical_accuracy: 0.8462 - val_loss: 1.9281 - val_categorical_accuracy: 0.3014\n","Epoch 18/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.5443 - categorical_accuracy: 0.8428 - val_loss: 1.8173 - val_categorical_accuracy: 0.3425\n","Epoch 19/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.4440 - categorical_accuracy: 0.9130 - val_loss: 2.0353 - val_categorical_accuracy: 0.2877\n","Epoch 20/30\n","10/10 [==============================] - 2s 196ms/step - loss: 0.4272 - categorical_accuracy: 0.8863 - val_loss: 1.9575 - val_categorical_accuracy: 0.3151\n","Epoch 21/30\n","10/10 [==============================] - 2s 199ms/step - loss: 0.3908 - categorical_accuracy: 0.9064 - val_loss: 2.2757 - val_categorical_accuracy: 0.3151\n","Epoch 22/30\n","10/10 [==============================] - 2s 194ms/step - loss: 0.3570 - categorical_accuracy: 0.9130 - val_loss: 2.0887 - val_categorical_accuracy: 0.2877\n","Epoch 23/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.2972 - categorical_accuracy: 0.9197 - val_loss: 2.1785 - val_categorical_accuracy: 0.3288\n","Epoch 24/30\n","10/10 [==============================] - 2s 207ms/step - loss: 0.2836 - categorical_accuracy: 0.9431 - val_loss: 2.1789 - val_categorical_accuracy: 0.2877\n","Epoch 25/30\n","10/10 [==============================] - 2s 198ms/step - loss: 0.2410 - categorical_accuracy: 0.9565 - val_loss: 2.3945 - val_categorical_accuracy: 0.3425\n","Epoch 26/30\n","10/10 [==============================] - 2s 196ms/step - loss: 0.1979 - categorical_accuracy: 0.9699 - val_loss: 2.2247 - val_categorical_accuracy: 0.2740\n","Epoch 27/30\n","10/10 [==============================] - 2s 196ms/step - loss: 0.1417 - categorical_accuracy: 0.9933 - val_loss: 2.5946 - val_categorical_accuracy: 0.3288\n","Epoch 28/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.1173 - categorical_accuracy: 0.9866 - val_loss: 2.4900 - val_categorical_accuracy: 0.2877\n","Epoch 29/30\n","10/10 [==============================] - 2s 200ms/step - loss: 0.1077 - categorical_accuracy: 0.9833 - val_loss: 2.6015 - val_categorical_accuracy: 0.3014\n","Epoch 30/30\n","10/10 [==============================] - 2s 200ms/step - loss: 0.0931 - categorical_accuracy: 0.9967 - val_loss: 2.7701 - val_categorical_accuracy: 0.3151\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"QATNPPk3G-hO"}},{"cell_type":"code","source":["np.mean(model2.history.history['val_categorical_accuracy']), np.max(model2.history.history['val_categorical_accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YJ5Wsj5gVPxB","executionInfo":{"status":"ok","timestamp":1671420541817,"user_tz":300,"elapsed":2,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"0761d721-25e1-4b49-bb58-5285f77eee8c"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.31552511552969614, 0.4109589159488678)"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["plt.plot(model2.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\n","plt.plot(model2.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\n","plt.legend(loc=\"upper left\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"AS7XHG5EHDRP","executionInfo":{"status":"ok","timestamp":1671420568280,"user_tz":300,"elapsed":307,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"98647d09-93c6-4777-b61d-28d27941fff0"},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["preds = model2.predict(imgs)\n","pred_labels = tf.argmax(preds, axis = -1)\n","\n","LABEL = []\n","for item in labels:\n","    LABEL += [np.argmax(item)]\n","print(LABEL)\n","\n","PRED = pred_labels.numpy().tolist()\n","\n","from sklearn.metrics import classification_report\n","print(classification_report(LABEL, PRED))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S5Cle0hqHE-H","executionInfo":{"status":"ok","timestamp":1671420571481,"user_tz":300,"elapsed":366,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"34553ee4-928c-4ee4-b6e0-116e43e5e45d"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 72ms/step\n","[6, 6, 3, 3, 3, 3, 6, 3, 6, 2, 2, 3, 5, 6, 3, 6, 2, 3, 4, 6, 1, 5, 5, 5, 4, 3, 2, 6, 1, 6, 2, 6]\n","              precision    recall  f1-score   support\n","\n","           1       0.00      0.00      0.00         2\n","           2       0.17      0.20      0.18         5\n","           3       0.44      0.44      0.44         9\n","           4       0.00      0.00      0.00         2\n","           5       0.33      0.50      0.40         4\n","           6       0.40      0.40      0.40        10\n","\n","    accuracy                           0.34        32\n","   macro avg       0.22      0.26      0.24        32\n","weighted avg       0.32      0.34      0.33        32\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"markdown","source":["## Batch Normalization and Dropout Layer "],"metadata":{"id":"rP5Fb3nLJ1Ub"}},{"cell_type":"code","source":["from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Flatten, LeakyReLU, Dense, Dropout"],"metadata":{"id":"zAnVIiOmJsM_","executionInfo":{"status":"ok","timestamp":1671420590581,"user_tz":300,"elapsed":2,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["model3 = tf.keras.Sequential()\n","\n","model3.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n","model3.add(layers.LeakyReLU())\n","\n","model3.add(layers.MaxPooling2D((2, 2)))\n","model3.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model3.add(layers.LeakyReLU())\n","model3.add(BatchNormalization())\n","\n","model3.add(layers.MaxPooling2D((2, 2)))\n","model3.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model3.add(layers.LeakyReLU())\n","model3.add(BatchNormalization())\n","\n","model3.add(layers.Flatten())\n","model3.add(layers.Dense(64, activation='relu'))\n","model3.add(layers.Dense(7, activation='softmax'))"],"metadata":{"id":"yq1OFGP1J8F-","executionInfo":{"status":"ok","timestamp":1671420590581,"user_tz":300,"elapsed":1,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["model3.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.0001),\n","              loss = tf.keras.losses.CategoricalCrossentropy(),\n","              metrics = [tf.keras.metrics.CategoricalAccuracy()])"],"metadata":{"id":"g9Bpld7EJ8F_","executionInfo":{"status":"ok","timestamp":1671420593632,"user_tz":300,"elapsed":5,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["history = model3.fit(img_generator_flow_train, \n","          validation_data=img_generator_flow_valid, epochs=30) \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671420657933,"user_tz":300,"elapsed":64305,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"3c1d5dea-11be-45de-ee90-15d564c0c121","id":"UytspORvJ8F_"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","10/10 [==============================] - 3s 276ms/step - loss: 4.3284 - categorical_accuracy: 0.1906 - val_loss: 1.8329 - val_categorical_accuracy: 0.2877\n","Epoch 2/30\n","10/10 [==============================] - 2s 235ms/step - loss: 1.7202 - categorical_accuracy: 0.5351 - val_loss: 1.8964 - val_categorical_accuracy: 0.1781\n","Epoch 3/30\n","10/10 [==============================] - 2s 223ms/step - loss: 1.1201 - categorical_accuracy: 0.6856 - val_loss: 1.8919 - val_categorical_accuracy: 0.1644\n","Epoch 4/30\n","10/10 [==============================] - 2s 212ms/step - loss: 0.5920 - categorical_accuracy: 0.8361 - val_loss: 1.8766 - val_categorical_accuracy: 0.2329\n","Epoch 5/30\n","10/10 [==============================] - 2s 205ms/step - loss: 0.3033 - categorical_accuracy: 0.9030 - val_loss: 1.8238 - val_categorical_accuracy: 0.2329\n","Epoch 6/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.1362 - categorical_accuracy: 0.9766 - val_loss: 1.8957 - val_categorical_accuracy: 0.1233\n","Epoch 7/30\n","10/10 [==============================] - 2s 206ms/step - loss: 0.0976 - categorical_accuracy: 0.9699 - val_loss: 1.9132 - val_categorical_accuracy: 0.2329\n","Epoch 8/30\n","10/10 [==============================] - 2s 206ms/step - loss: 0.0691 - categorical_accuracy: 0.9799 - val_loss: 1.8974 - val_categorical_accuracy: 0.2329\n","Epoch 9/30\n","10/10 [==============================] - 2s 202ms/step - loss: 0.0258 - categorical_accuracy: 0.9933 - val_loss: 1.9074 - val_categorical_accuracy: 0.2329\n","Epoch 10/30\n","10/10 [==============================] - 2s 207ms/step - loss: 0.0206 - categorical_accuracy: 0.9933 - val_loss: 1.8889 - val_categorical_accuracy: 0.2329\n","Epoch 11/30\n","10/10 [==============================] - 2s 222ms/step - loss: 0.0079 - categorical_accuracy: 1.0000 - val_loss: 1.8847 - val_categorical_accuracy: 0.2329\n","Epoch 12/30\n","10/10 [==============================] - 2s 221ms/step - loss: 0.0079 - categorical_accuracy: 1.0000 - val_loss: 1.9568 - val_categorical_accuracy: 0.2329\n","Epoch 13/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.0043 - categorical_accuracy: 1.0000 - val_loss: 2.0730 - val_categorical_accuracy: 0.2329\n","Epoch 14/30\n","10/10 [==============================] - 2s 220ms/step - loss: 0.0026 - categorical_accuracy: 1.0000 - val_loss: 2.1625 - val_categorical_accuracy: 0.2329\n","Epoch 15/30\n","10/10 [==============================] - 2s 206ms/step - loss: 0.0040 - categorical_accuracy: 1.0000 - val_loss: 2.2559 - val_categorical_accuracy: 0.2329\n","Epoch 16/30\n","10/10 [==============================] - 2s 209ms/step - loss: 0.0031 - categorical_accuracy: 1.0000 - val_loss: 2.3294 - val_categorical_accuracy: 0.2329\n","Epoch 17/30\n","10/10 [==============================] - 2s 205ms/step - loss: 0.0028 - categorical_accuracy: 1.0000 - val_loss: 2.4060 - val_categorical_accuracy: 0.2329\n","Epoch 18/30\n","10/10 [==============================] - 2s 204ms/step - loss: 0.0024 - categorical_accuracy: 1.0000 - val_loss: 2.4646 - val_categorical_accuracy: 0.2329\n","Epoch 19/30\n","10/10 [==============================] - 2s 206ms/step - loss: 0.0019 - categorical_accuracy: 1.0000 - val_loss: 2.5074 - val_categorical_accuracy: 0.2329\n","Epoch 20/30\n","10/10 [==============================] - 2s 205ms/step - loss: 0.0018 - categorical_accuracy: 1.0000 - val_loss: 2.5564 - val_categorical_accuracy: 0.2329\n","Epoch 21/30\n","10/10 [==============================] - 2s 204ms/step - loss: 0.0016 - categorical_accuracy: 1.0000 - val_loss: 2.6281 - val_categorical_accuracy: 0.2329\n","Epoch 22/30\n","10/10 [==============================] - 2s 215ms/step - loss: 0.0018 - categorical_accuracy: 1.0000 - val_loss: 2.7487 - val_categorical_accuracy: 0.2329\n","Epoch 23/30\n","10/10 [==============================] - 2s 200ms/step - loss: 0.0014 - categorical_accuracy: 1.0000 - val_loss: 2.8464 - val_categorical_accuracy: 0.2329\n","Epoch 24/30\n","10/10 [==============================] - 2s 198ms/step - loss: 0.0013 - categorical_accuracy: 1.0000 - val_loss: 2.9173 - val_categorical_accuracy: 0.2329\n","Epoch 25/30\n","10/10 [==============================] - 2s 201ms/step - loss: 0.0017 - categorical_accuracy: 1.0000 - val_loss: 2.9094 - val_categorical_accuracy: 0.2329\n","Epoch 26/30\n","10/10 [==============================] - 2s 203ms/step - loss: 0.0013 - categorical_accuracy: 1.0000 - val_loss: 2.9086 - val_categorical_accuracy: 0.2329\n","Epoch 27/30\n","10/10 [==============================] - 2s 214ms/step - loss: 8.5899e-04 - categorical_accuracy: 1.0000 - val_loss: 2.9093 - val_categorical_accuracy: 0.2329\n","Epoch 28/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.0012 - categorical_accuracy: 1.0000 - val_loss: 2.8971 - val_categorical_accuracy: 0.2329\n","Epoch 29/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.0014 - categorical_accuracy: 1.0000 - val_loss: 2.9261 - val_categorical_accuracy: 0.2329\n","Epoch 30/30\n","10/10 [==============================] - 2s 197ms/step - loss: 0.0011 - categorical_accuracy: 1.0000 - val_loss: 2.9137 - val_categorical_accuracy: 0.2329\n"]}]},{"cell_type":"code","source":["np.mean(model3.history.history['val_categorical_accuracy']), np.max(model3.history.history['val_categorical_accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EAdemNEDVRV3","executionInfo":{"status":"ok","timestamp":1671420658431,"user_tz":300,"elapsed":527,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"17577ced-9cb5-419f-e92f-df14c386fef7"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.2269406445324421, 0.2876712381839752)"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","source":[],"metadata":{"id":"CB5-MSV9J8GB"}},{"cell_type":"code","source":["plt.plot(model3.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\n","plt.plot(model3.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\n","plt.legend(loc=\"upper left\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1671420658432,"user_tz":300,"elapsed":12,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"36303951-a626-482f-f27c-c91a76b66b85","id":"VCE6Fxn-J8GB"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["imgs, labels = next(iter(img_generator_flow_valid))\n","preds = model3.predict(imgs)\n","pred_labels = tf.argmax(preds, axis = -1)\n","\n","LABEL = []\n","for item in labels:\n","    LABEL += [np.argmax(item)]\n","print(LABEL)\n","\n","PRED = pred_labels.numpy().tolist()\n","\n","from sklearn.metrics import classification_report\n","print(classification_report(LABEL, PRED))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671420658432,"user_tz":300,"elapsed":10,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"38a4610c-f075-4c1e-f614-2e3c09339b62","id":"9l0shcuHJ8GC"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 88ms/step\n","[3, 6, 5, 6, 6, 6, 1, 5, 2, 6, 4, 2, 1, 6, 6, 1, 1, 5, 5, 6, 3, 5, 6, 3, 4, 5, 6, 5, 3, 6, 3, 3]\n","              precision    recall  f1-score   support\n","\n","           1       0.00      0.00      0.00         4\n","           2       0.00      0.00      0.00         2\n","           3       0.19      1.00      0.32         6\n","           4       0.00      0.00      0.00         2\n","           5       0.00      0.00      0.00         7\n","           6       0.00      0.00      0.00        11\n","\n","    accuracy                           0.19        32\n","   macro avg       0.03      0.17      0.05        32\n","weighted avg       0.04      0.19      0.06        32\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["# list(zip(LABEL, PRED))\n","i = 0\n","for img, label in zip(imgs, labels):\n","  value=np.argmax(label)\n","  plt.imshow(img)\n","  plt.title(\"True: \"+ num_to_string_mapping[value] + \"   Pred: \"+ str(num_to_string_mapping[PRED[i]]))\n","  plt.show()\n","  i+=1"],"metadata":{"id":"Ef13PX2aMhUR","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1v2pI-QHHYtp_W7kvzWsJeND06YGfwTGR"},"executionInfo":{"status":"ok","timestamp":1671420671187,"user_tz":300,"elapsed":12762,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}},"outputId":"ed61b27e-d3bb-42cd-8af4-61fd45406ace"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["## More things\n"],"metadata":{"id":"v_c4JBSnMpQx"}},{"cell_type":"code","source":["from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Flatten, LeakyReLU, Dense, Dropout"],"metadata":{"id":"E8LAjNqZMq-q","executionInfo":{"status":"aborted","timestamp":1671420366124,"user_tz":300,"elapsed":30,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model4 = tf.keras.Sequential()\n","\n","model4.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n","model4.add(layers.LeakyReLU())\n","\n","model4.add(layers.MaxPooling2D((2, 2)))\n","model4.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model4.add(layers.LeakyReLU())\n","model4.add(BatchNormalization())\n","\n","model4.add(layers.MaxPooling2D((2, 2)))\n","model4.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model4.add(layers.LeakyReLU())\n","model4.add(BatchNormalization())\n","\n","model4.add(layers.Flatten())\n","model4.add(layers.Dense(64, activation='relu'))\n","model4.add(layers.Dense(64, activation='relu'))\n","model4.add(layers.Dense(7, activation='softmax'))"],"metadata":{"id":"X3og7sKFMq-q","executionInfo":{"status":"aborted","timestamp":1671420366124,"user_tz":300,"elapsed":30,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model4.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.0001),\n","              loss = tf.keras.losses.CategoricalCrossentropy(),\n","              metrics = [tf.keras.metrics.CategoricalAccuracy()])"],"metadata":{"id":"pP7RaE6BMq-q","executionInfo":{"status":"aborted","timestamp":1671420366125,"user_tz":300,"elapsed":31,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model4.fit(img_generator_flow_train, \n","          validation_data=img_generator_flow_valid, epochs=100) \n"],"metadata":{"id":"W6iz6GG2Mq-q","executionInfo":{"status":"aborted","timestamp":1671420366125,"user_tz":300,"elapsed":31,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"v4WGBcNRMq-q"}},{"cell_type":"code","source":["np.mean(model.history.history['val_categorical_accuracy']), np.max(model.history.history['val_categorical_accuracy'])"],"metadata":{"id":"BZijk9mcVTAZ","executionInfo":{"status":"aborted","timestamp":1671420366126,"user_tz":300,"elapsed":31,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.plot(model4.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\n","plt.plot(model4.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\n","plt.legend(loc=\"upper left\")\n","plt.show()"],"metadata":{"id":"I02Um0I0Mq-q","executionInfo":{"status":"aborted","timestamp":1671420366127,"user_tz":300,"elapsed":32,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imgs, labels = next(iter(img_generator_flow_valid))\n","preds = model4.predict(imgs)\n","pred_labels = tf.argmax(preds, axis = -1)\n","\n","LABEL = []\n","for item in labels:\n","    LABEL += [np.argmax(item)]\n","print(LABEL)\n","\n","PRED = pred_labels.numpy().tolist()\n","\n","from sklearn.metrics import classification_report\n","print(classification_report(LABEL, PRED))"],"metadata":{"id":"UgPqD1t_Mq-q","executionInfo":{"status":"aborted","timestamp":1671420366127,"user_tz":300,"elapsed":32,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# list(zip(LABEL, PRED))\n","i = 0\n","for img, label in zip(imgs, labels):\n","  value=np.argmax(label)\n","  plt.imshow(img)\n","  plt.title(\"True: \"+ num_to_string_mapping[value] + \"   Pred: \"+ str(num_to_string_mapping[PRED[i]]))\n","  plt.show()\n","  i+=1"],"metadata":{"id":"Rb9en5_FMq-r","executionInfo":{"status":"aborted","timestamp":1671420366128,"user_tz":300,"elapsed":33,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Xu8a-Va3J0Iv","executionInfo":{"status":"aborted","timestamp":1671420366128,"user_tz":300,"elapsed":32,"user":{"displayName":"Feifei Wang","userId":"12348858417878136259"}}},"execution_count":null,"outputs":[]}]}
